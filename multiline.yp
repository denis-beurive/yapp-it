# This parser accepts lines that look like:
#      varname = { name1 name2
#                  name3
#      }
#      or:
#      varname =
#      { name1 name2
#        name3 }

### -------------------------------------------------
### Tockens declarations.
### -------------------------------------------------

%strict

# Note: the regexp notation \s matches any whitespace character (space, tab, newline).
#       therefore, "newlines" are treated as spaces.

%whites           = /(\s+)/
%token NAME       = /([a-zA-Z0-9]+)/

### -------------------------------------------------
### Code that will be copied into the parser.
### -------------------------------------------------

%{
	my %statement = ('var' => undef, 'declaration' => []);
	
	sub resetParser {
		%statement = ('var' => undef, 'declaration' => []);
	}
	
	sub getDeclaration {
		return %statement;
	}

%}

### -------------------------------------------------
### Declare the first rule.
### -------------------------------------------------

%start declaration

%%

declaration: NAME '=' '{' list '}' { $statement{'var'} = $_[1]; }
           ;

list:
      NAME                 { push(@{$statement{'declaration'}}, $_[1]); }
    | list NAME            { push(@{$statement{'declaration'}}, $_[2]); }
    ;

%%